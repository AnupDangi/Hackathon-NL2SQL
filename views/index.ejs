<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SQL Query Generator</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
       

body {
    font-family: 'Segoe UI', system-ui, sans-serif;
    margin: 0;
    padding: 0;
    background: linear-gradient(to right, #f8f9fa, #e9ecef);
    color: #333;
    transition: all 0.3s ease;
}

/* Header Styles */
.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    background: linear-gradient(to right, #2d2d2d, #404040);
    color: white;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}
.logo {
    font-size: 1.5rem;
    font-weight: 600;
    letter-spacing: 0.5px;
}
.nav-links {
    display: flex;
    gap: 2rem;
    margin-left: auto;
}
.nav-links a {
    color: white;
    text-decoration: none;
    font-size: 1rem;
    transition: color 0.3s;
    padding: 0.5rem 1rem;
    border-radius: 4px;
}
.nav-links a:hover {
    color: #00b4d8;
}
.header-controls {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    margin-left: 3rem;
}
.theme-toggle {
    cursor: pointer;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: white;
    padding: 0;
    transition: transform 0.3s;
}
.theme-toggle:hover {
    transform: scale(1.1);
}

/* Main Content */
.container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
}
.layout {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

/* Schema Output Section */
.schema-output-container {
    background: rgba(255, 255, 255, 0.9);
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
}
.schema-description {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: #2d2d2d;
}
.schema-output {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    min-height: 120px;
    font-family: monospace;
    color: #333;
}

/* Key Features Section */
.key-features {
    margin: 3rem 0;
    width: 100%;
}
.features-title {
    text-align: center;
    font-size: 2rem;
    margin-bottom: 2rem;
    color: #2d2d2d;
}
.features-grid {
    display: flex;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
}
.feature-card {
    flex: 1;
    min-width: 200px;
    max-width: 250px;
    background: rgba(255, 255, 255, 0.95);
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;
    text-align: center;
    position: relative;
    overflow: hidden;
    border: 2px solid transparent; /* Initial border */
}
.feature-card:hover {
    transform: translateY(-5px);
}
.feature-card:hover::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #ffd700, #ffcc00, #ffd700, #ffcc00);
    z-index: -1;
    border-radius: 14px; /* Slightly larger to cover the border */
    animation: shine 3s infinite linear;
}
@keyframes shine {
    0% {
        background-position: -200%;
    }
    100% {
        background-position: 200%;
    }
}
.feature-emoji {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}
.feature-card h3 {
    color: #2d2d2d;
    margin-bottom: 1rem;
}

/* Query Boxes */
.query-boxes {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
}
.user-query, .generated-query {
    background: rgba(255, 255, 255, 0.95);
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
}
textarea {
    width: 100%;
    height: 150px;
    padding: 1rem;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-family: monospace;
    margin: 1rem 0;
    resize: vertical;
}
.query-buttons {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
}
button {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    background: #00b4d8;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
}
button:hover {
    background: #0096c7;
}

/* Dark Mode Styles */
.dark-mode {
    background: linear-gradient(to right, #1a1a1a, #2d2d2d);
    color: #fff;
}
.dark-mode .schema-output-container,
.dark-mode .feature-card,
.dark-mode .user-query,
.dark-mode .generated-query {
    background: rgba(40, 40, 40, 0.95);
    color: #fff;
}
.dark-mode .schema-description,
.dark-mode .feature-card h3,
.dark-mode .features-title {
    color: #fff;
}
.dark-mode textarea {
    background: #2d2d2d;
    border-color: #404040;
    color: #fff;
}
/* Architecture Section */
.architecture-section {
    margin-top: 4rem;
    text-align: center;
}
.architecture-section img {
    max-width: 80%;
    height: auto;
    border-radius: 12px;
    margin-top: 1.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
}
.architecture-section img:hover {
    transform: scale(1.02);
}
.architecture-section p {
    max-width: 800px;
    margin: 1rem auto;
    font-size: 1.1rem;
    line-height: 1.6;
    color: #555;
}
.dark-mode .architecture-section p {
    color: #ddd;
}
    </style>
</head>
<body>
    <% if (messages.success) { %>
        <div class="alert alert-success">
            <%= messages.success %>
        </div>
    <% } %>
    
    <% if (messages.error) { %>
        <div class="alert alert-danger">
            <%= messages.error %>
        </div>
    <% } %>
    
    <script>
        console.log('Flash messages in index.ejs:', <%- JSON.stringify(messages) %>);
    </script>

    <!-- Header -->
    <header class="header">
        <div class="logo">SchemaSherpa</div>
        <div style="display: flex; align-items: center;">
            <nav class="nav-links">
                <a href="/">Home</a>
                <a href="/about">About</a>
                <a href="/contact">Contact</a>
            </nav>
            <div class="header-controls">
                <div class="db-connect">
                    <a href="/connect">Connect</a>
                </div>
                <button class="theme-toggle" onclick="toggleTheme()">üåì</button>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <section class="container">
        <div class="layout">
            <!-- Schema Output -->
            <div class="schema-output-container">
                <div class="schema-description" id="typing-text"></div>
                <pre class="schema-output" id="schemaTables">// Selected tables will appear here</pre>
            </div>

            <!-- Query Boxes -->
            <div class="query-boxes">
                <div class="user-query">
                    <h2>Natural Language Query</h2>
                    <textarea id="userQuery" placeholder="Enter your question..."></textarea>
                    <div class="query-buttons">
                        <button id="generateSQL">Generate SQL</button>
                    </div>
                </div>
                <div class="generated-query">
                    <h2>Generated SQL</h2>
                    <textarea id="generatedSQL" readonly></textarea>
                    <div class="query-buttons">
                        <button onclick="copySQL()">Copy</button>
                        <button onclick="runSQL()">Execute</button>
                    </div>
                </div>
            </div>

            <!-- Key Features Section -->
            <div class="key-features">
                <h2 class="features-title">Key Features</h2>
                <div class="features-grid">
                    <div class="feature-card">
                        <div class="feature-emoji">üåç</div>
                        <h3>Web-Based MySQL Interaction</h3>
                        <p>Directly connect to your database and execute queries in real-time through your browser.</p>
                    </div>
                    <div class="feature-card">
                        <div class="feature-emoji">üß†</div>
                        <h3>Natural Language Processing</h3>
                        <p>Advanced AI converts your questions into precise SQL queries instantly.</p>
                    </div>
                    <div class="feature-card">
                        <div class="feature-emoji">üë•</div>
                        <h3>User-Centric Design</h3>
                        <p>Intuitive interface suitable for both experts and beginners.</p>
                    </div>
                    <div class="feature-card">
                        <div class="feature-emoji">üîí</div>
                        <h3>Data Security</h3>
                        <p>Secure processing with no data storage on our servers.</p>
                    </div>
                </div>
                <!-- Architecture Section -->
                <div class="architecture-section">
                    <h2 class="features-title">Architecture Used</h2>
                    <p>SchemaSherpa leverages a robust architecture that combines Natural Language Processing (NLP) with advanced machine learning models to interpret user inputs and generate precise SQL queries. The system is built on a scalable backend that ensures high performance and reliability.</p>
                    <img src="/images/logo.jpeg" alt="SQL Architecture Diagram" onerror="this.onerror=null; this.src='fallback.png'; this.alt='Image not found';">
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <%- include("partials/footer") %>

    <script>

        
        // Typing Effect
        const texts = [
            "Transform Natural Language to SQL",
            "Smart Schema Analysis & Query Generation"
        ];
        let index = 0, charIndex = 0, isDeleting = false;

        function typeEffect() {
            const typingElement = document.getElementById("typing-text");
            const currentText = texts[index];
            
            if (!isDeleting) {
                typingElement.textContent = currentText.slice(0, charIndex++);
                if (charIndex > currentText.length) {
                    isDeleting = true;
                    setTimeout(typeEffect, 2000);
                    return;
                }
            } else {
                typingElement.textContent = currentText.slice(0, charIndex--);
                if (charIndex === 0) {
                    isDeleting = false;
                    index = (index + 1) % texts.length;
                }
            }
            setTimeout(typeEffect, isDeleting ? 50 : 100);
        }

        // Theme Toggle
        function toggleTheme() {
            document.body.classList.toggle("dark-mode");
            const themeButton = document.querySelector(".theme-toggle");
            themeButton.textContent = document.body.classList.contains("dark-mode") ? "üåû" : "üåô";
        }

        // Copy SQL to Clipboard
        function copySQL() {
            const sqlTextarea = document.getElementById("generatedSQL");
            sqlTextarea.select();
            navigator.clipboard.writeText(sqlTextarea.value);
            alert("SQL copied to clipboard!");
        }

        // Execute SQL Query
        async function runSQL() {
        const sqlQuery = document.getElementById("generatedSQL").value;

        if (!sqlQuery) {
                alert("No SQL query to execute!");
                return;
            }

        try {
            const response = await fetch('/execute', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ query: sqlQuery }),
            });
            const result = await response.json();

            if (result.error) {
                alert(result.error);
            } else {
                // Display the query results in the schemaTables div as a table
                const schemaTables = document.getElementById("schemaTables");
                schemaTables.innerHTML = formatAsTable(result.result);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to execute the query.");
        }
     }

        // Function to format query results as a table
        function formatAsTable(data) {
            if (!data || data.length === 0) return "No results found.";

            const keys = Object.keys(data[0]);
            let table = `<table border="1" cellpadding="5" cellspacing="0" style="width: 100%; border-collapse: collapse;">`;

            // Add table headers
            table += `<thead><tr>`;
            keys.forEach(key => {
                table += `<th style="padding: 10px; background-color: #f2f2f2; border: 1px solid #ddd;">${key}</th>`;
            });
            table += `</tr></thead>`;

            // Add table rows
            table += `<tbody>`;
            data.forEach(row => {
                table += `<tr>`;
                keys.forEach(key => {
                    table += `<td style="padding: 10px; border: 1px solid #ddd;">${row[key]}</td>`;
                });
                table += `</tr>`;
            });
            table += `</tbody></table>`;

            return table;
        }

        // Generate SQL Query
        document.getElementById("generateSQL").addEventListener("click", async () => {
            const userQuery = document.getElementById("userQuery").value;

            if (!userQuery) {
                alert("Please enter a natural language query!");
                return;
            }

            try {
                const response = await fetch('/query', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query: userQuery }),
                });
                const result = await response.json();

                if (result.error) {
                    alert(result.error);
                } else {
                    document.getElementById("generatedSQL").value = result.result;
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Failed to generate SQL query.");
            }
        });

        document.addEventListener("DOMContentLoaded", typeEffect);
    </script>
</body>
</html>